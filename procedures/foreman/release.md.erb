# Writing release notes

* [ ] Update manual if applicable for any additional installation steps
* [ ] Draft release notes in markdown ([example](https://gist.github.com/domcleal/5567450)), with these sections (and do not use personal pronouns):
  * [ ] Headline features: half a dozen important features with a few sentences description each
  * [ ] Upgrade notes: all important notices that users must be aware of before upgrading
  * [ ] Release notes: bullet point list by category of most changes, excluding bug fixes for issues introduced during the release cycle, include link to bug numbers. You can auto-generate changes using the 'changelog' command in [tool_belt](https://github.com/theforeman/tool_belt)
  * [ ] CLI release notes are taken from the hammer-cli and hammer-cli-foreman changelogs
  * [ ] Link to installer changelogs and note versions being used
* [ ] Get the apipie doc and place it in [api](https://github.com/theforeman/theforeman.org/tree/gh-pages/api)/<%= short_version %>

# Preparing code

* [ ] Request Hammer CLI releases from maintainers if desired
* [ ] Make patch releases of installer modules that have important changes
  * [ ] Branch to MAJ.MIN-stable if recent changes to the module aren't suitable for patch (x.y.z) release
* [ ] Compare tagged packages in nightly vs. release koji tag and re-tag any updated dependencies that are required
<% unless is_rc %>* [ ] Add a new [Redmine version](https://projects.theforeman.org/projects/foreman/settings/versions) for the next minor, unless the series is EOL. Be sure the version is set to sharing with subprojects.
<% end %>* [ ] Remove/change release field for any open Redmine tickets assigned to the release still (next minor, unset it or reject)
<% unless is_rc %>* [ ] Change Redmine version <%= full_version %> state to Closed
<% end %>* [ ] List all issues targeted at the release, order by Closed date ascending and use git cherry-pick -x to cherry pick from develop to <%= full_version %>-stable branch
* [ ] Clone [tool_belt](https://github.com/theforeman/tool_belt) and run:
  * [ ] `./tools.rb setup-environment configs/foreman/<%= short_version %>.yaml`
  * [ ] `./tools.rb cherry-picks --version <%= full_version %> configs/foreman/<%= short_version %>.yaml`
  * [ ] Verify tickets in the cherry_picks_<%= full_version %> file are accounted for or additional cherry pick them

# Tagging a release

* [ ] In foreman <%= short_version %>-stable:
  * [ ] Make sure [test_<%= short_version.tr('.', '_') %>_stable](https://ci.theforeman.org/job/test_<%= short_version.tr('.', '_') %>_stable/) is green
  * [ ] run `make -C locale tx-update` (if Transifex has not switched to the next major release yet, usually after .2)
  * [ ] run `script/sync_templates.sh`
  * [ ] update template snapshots with `rake snapshots:generate RAILS_ENV=test` and verify changes are expected
  * [ ] change VERSION to <%= full_version %>
  * [ ] Run `extras/changelog`
  * [ ] Commit: `git commit -am "Release <%= full_version %>"`
  * [ ] Tag: `git tag -s -m "Release <%= full_version %>" <%= full_version %>`
  * [ ] Push: `git push --follow-tags`
* [ ] In smart-proxy <%= short_version %>-stable:
  * [ ] Make sure [test_proxy_<%= short_version.tr('.', '_') %>_stable](https://ci.theforeman.org/job/test_proxy_<%= short_version.tr('.', '_') %>_stable/) is green
  * [ ] change VERSION to <%= full_version %>
  * [ ] Run `extra/changelog`
  * [ ] Commit: `git commit -am "Release <%= full_version %>"`
  * [ ] Tag: `git tag -s -m "Release <%= full_version %>" <%= full_version %>`
  * [ ] Push: `git push --follow-tags`
* [ ] In foreman-selinux <%= short_version %>-stable:
  * [ ] change VERSION to <%= full_version %>
  * [ ] Run `extras/changelog`
  * [ ] Commit: `git commit -am "Release <%= full_version %>"`
  * [ ] Tag: `git tag -s -m "Release <%= full_version %>" <%= full_version %>`
  * [ ] Push: `git push --follow-tags`
* [ ] In foreman-installer <%= short_version %>-stable:
  * [ ] change VERSION to <%= full_version %>
  * [ ] Commit: `git commit -am "Release <%= full_version %>"`
  * [ ] Tag: `git tag -s -m "Release <%= full_version %>" <%= full_version %>`
  * [ ] Push: `git push --follow-tags`
* [ ] Run the Jenkins [Tarballs Release](https://ci.theforeman.org/job/tarballs-release/) to create tarballs
* [ ] [Download](https://github.com/ekohl/theforeman-rel-eng/blob/master/download_tarballs), [inspect](https://github.com/ekohl/theforeman-rel-eng/blob/master/inspect_tarballs), [sign and upload detached signatures](https://github.com/ekohl/theforeman-rel-eng/blob/master/sign_tarballs)

Note: If for some reason there was an issue with the tarballs that required uploading new tarballs, CDN cache should be invalidated so that the builders use the updated tarballs.

# Packaging a release

[Background documentation](https://projects.theforeman.org/projects/foreman/wiki/Release_Process#Packaging-a-release)

* [ ] Update [foreman-packaging](https://github.com/theforeman/foreman-packaging) [rpm/<%= short_version %>](https://github.com/ekohl/theforeman-rel-eng/blob/master/bump_rpm_packaging) and [deb/<%= short_version %>](https://github.com/ekohl/theforeman-rel-eng/blob/master/bump_deb_packaging) branches
* [ ] Trigger [release_packages in Jenkins](https://ci.theforeman.org/job/release_packages/) by calling [release_packages](https://github.com/ekohl/theforeman-rel-eng/blob/master/release_packages)
* [ ] [Download](https://github.com/ekohl/theforeman-rel-eng/blob/master/download_rpms), [sign](https://github.com/ekohl/theforeman-rel-eng/blob/master/sign_rpms), [upload RPM signatures](https://github.com/ekohl/theforeman-rel-eng/blob/master/upload_rpm_signatures) and [upload RPMs](https://github.com/ekohl/theforeman-rel-eng/blob/master/upload_rpms)
<% if is_rc %>* [ ] [Download](https://github.com/ekohl/theforeman-rel-eng/blob/master/download_extras), [sign](https://github.com/ekohl/theforeman-rel-eng/blob/master/sign_extras) and [upload](https://github.com/ekohl/theforeman-rel-eng/blob/master/upload_extras) "extra" RPMs
<% end %>* [ ] Trigger [release_mash](https://ci.theforeman.org/job/release_mash/) if it wasn't already
* [ ] If mashing didn't, trigger [release_test](https://ci.theforeman.org/job/release_test/)
* [ ] If testing didn't, trigger [release_push_deb](https://ci.theforeman.org/job/release_push_deb/) and [release_push_rpm](https://ci.theforeman.org/job/release_push_rpm/) by calling [promote_staging](https://github.com/ekohl/theforeman-rel-eng/blob/master/promote_staging)
