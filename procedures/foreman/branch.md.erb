# Two weeks before branching

* [ ] Make releases of installer modules
  * Tier 0 (no dependencies)
    * [ ] [certs](https://github.com/theforeman/puppet-certs)
    * [ ] [dhcp](https://github.com/theforeman/puppet-dhcp)
    * [ ] [dns](https://github.com/theforeman/puppet-dns)
    * [ ] [foreman](https://github.com/theforeman/puppet-foreman)
    * [ ] [git](https://github.com/theforeman/puppet-git)
    * [ ] [puppet](https://github.com/theforeman/puppet-puppet)
    * [ ] [qpid](https://github.com/theforeman/puppet-qpid)
    * [ ] [tftp](https://github.com/theforeman/puppet-tftp)
  * Tier 1 (Dependencies on Tier 0)
    * [ ] [candlepin](https://github.com/theforeman/puppet-candlepin)
    * [ ] [foreman_proxy](https://github.com/theforeman/puppet-foreman_proxy)
    * [ ] [pulp](https://github.com/theforeman/puppet-pulp)
  * Tier 2 (Dependencies on Tier 1)
    * [ ] [foreman_proxy_content](https://github.com/theforeman/puppet-foreman_proxy_content)
    * [ ] [katello](https://github.com/theforeman/puppet-katello)
* [ ] Ensure headline features planned for the release have been merged or push them off to the next release.
* Translations:
  * [ ] Update locales in foreman **develop**: `make -C locale tx-update`
  * [ ] Ask plugin authors to start extracting i18n strings and pushing the changes into develop/master git branches so Transiflex can pick it up
  * [ ] Announce string freeze date on discourse and send announcement via https://www.transifex.com/foreman/foreman/announcements/
  * [ ] Update [foreman-dev](https://community.theforeman.org/c/development) with [translations status](https://www.transifex.com/projects/p/foreman/) to encourage 100% translations before release

# During the week before branching

* [ ] Announce start of stabilization week to discourse [development category](https://community.theforeman.org/c/development).
* Prepare the manual for the new version:
  * [ ] Change `$latest` and `$next` parameters on [web class](https://github.com/theforeman/foreman-infra/blob/master/puppet/modules/web/manifests/init.pp) to point to the new version numbers
  * [ ] Copy [website manual content](https://github.com/theforeman/theforeman.org/tree/gh-pages/manuals) from nightly to <%= release %> and update version numbers mentioned in it.
  * [ ] Clean up deprecation and upgrade warnings from nightly manual.
* [ ] Refresh unattended templates
  * [ ] Sync the community-templates to Foreman core, by running `script/sync_templates.sh`
  * [ ] Create a <%= @release %>-stable branch in [community-templates](https://github.com/theforeman/community-templates)
* [ ] Add new languages that are at a [reasonable completion on Transifex](https://www.transifex.com/foreman/foreman/foreman/) to **develop**
* [ ] [Generate](https://github.com/ekohl/theforeman-rel-eng/blob/master/generate_gpg), [backup](https://github.com/ekohl/theforeman-rel-eng/blob/master/export_gpg_private), [sign](https://github.com/ekohl/theforeman-rel-eng/blob/master/sign_gpg) and [upload](https://github.com/ekohl/theforeman-rel-eng/blob/master/upload_gpg) a GPG key. See [GPG_Keys](https://projects.theforeman.org/projects/foreman/wiki/GPG_Keys) if needed.
* [ ] Publish the key by [exporting](https://github.com/ekohl/theforeman-rel-eng/blob/master/export_gpg_public) the GPG key
  * [ ] Update the website's [security.md](https://github.com/theforeman/theforeman.org/blob/gh-pages/security.md) and create a file in [static/keys](https://github.com/theforeman/theforeman.org/tree/gh-pages/static/keys)
  * [ ] Create [releases/<%= release %>/RPM-GPG-KEY-foreman](https://yum.theforeman.org/releases/<%= release %>/RPM-GPG-KEY-foreman) on yum.theforeman.org

# Package build systems

* [ ] Clone tags and create build targets in Koji
* [ ] Create mash scripts and configuration on Koji
* [ ] Add new plugin tags to Koji plugins mash script (foreman-mash-split-plugins.py), remove old ones (keep three)
* [ ] Add version <%= release %> to jobs in axes and/or combination filters, remove old ones (keep three)
* [ ] Clone Debian nightly repos to <%= release %> using [copy/freight instructions](https://projects.theforeman.org/projects/foreman/wiki/Debian_Packaging#Branching-for-release)
* [ ] Include Rails repository
  * [ ] Add foreman-rails-<%= release %>-rhel7 tag entries to Foreman tool_belt config
  * [ ] Add mash script config entry to tool_belt config: foreman-rails-<%= release %>-rhel7
  * [ ] Copy mash script config to Koji
  * [ ] Add foreman-rails-mash-split-<%= release %>.py to Koji /usr/local/bin
* [ ] Add foreman-client
  * [ ] Add client tag configuration to tool_belt config
  * [ ] Clone tags and create build targets
  * [ ] Create mash scripts and transfer to Koji
  * [ ] Create release job in foreman-infra, [example](https://github.com/theforeman/foreman-infra/blob/master/puppet/modules/jenkins_job_builder/files/theforeman.org/yaml/jobs/pipeline/foreman-client-1.21-rpm-pipeline.yaml)

# Branch main code repos

* [ ] Create <%= release %>-stable branches
  * [ ] [foreman](https://github.com/theforeman/foreman)
  * [ ] [foreman-installer](https://github.com/theforeman/foreman-installer)
    * [ ] `bundle exec rake pin_modules && sed -i '/Puppetfile.lock/d' .gitignore && bundle exec librarian-puppet install && git add Puppetfile*`
  * [ ] [foreman-selinux](https://github.com/theforeman/foreman-selinux)
  * [ ] [smart-proxy](https://github.com/theforeman/smart-proxy)
* [ ] Branch foreman-packaging
  * [ ] Create rpm/<%= release %> and update `packages/foreman/foreman-release/foreman.gpg`, `mock/*.cfg`, `package_manifest.yaml`, `rel-eng/{releasers.conf,tito.props}` and `repoclosure/*.conf`
  * [ ] Create deb/<%= release %>
  * [ ] Update `.github/PULL_REQUEST_TEMPLATE.md` (by adding `[ ] <%= release %>` to it) in `master`
* [ ] Bump versions to <%= develop %>-develop
  `echo <%= develop %>.0-develop > VERSION`
  * [ ] [foreman](https://github.com/theforeman/foreman)
  Also change package.json version field to <%= develop %>.0
  * [ ] [foreman-installer](https://github.com/theforeman/foreman-installer)
  * [ ] [foreman-selinux](https://github.com/theforeman/foreman-selinux)
  * [ ] [smart-proxy](https://github.com/theforeman/smart-proxy)
* [ ] Update foreman-packaging:
  * [ ] rpm/develop: Update `rel-eng/{releasers.conf,tito.props}`, `packages/foreman/foreman{,-{installer,proxy,release,selinux}}/*.spec`
  * [ ] deb/develop: `scripts/changelog.rb -v <%= develop %>.0-1 -m "Bump changelog to <%= develop %>.0 to match VERSION" debian/*/*/changelog`

# Other systems

* [ ] Create release schedule page for next version (<%= develop %>) linked from [Development_Resources](https://projects.theforeman.org/projects/foreman/wiki/Development_Resources) and post planned schedule on Discourse.
* Create Redmine versions
  * [ ] Add next version number (<%= develop %>) and make sure it is shared with subprojects in [foreman](https://projects.theforeman.org/projects/foreman/settings/versions)
  * [ ] Add first patch release (<%= release %>.1) and make sure it is shared with subprojects in [foreman](https://projects.theforeman.org/projects/foreman/settings/versions)
* [ ] Create test_<%= release.tr('.', '_') %>_stable.yaml and test_proxy_<%= release.tr('.', '_') %>_stable.yaml for [JJB in foreman-infra](https://github.com/theforeman/foreman-infra/tree/master/puppet/modules/jenkins_job_builder/files/theforeman.org/yaml/jobs), remove the oldest version to keep last 3
* [ ] Ensure current Foreman deprecations for the next release are removed in *develop*
* [ ] Add <%= release %> to [Forklift versions config](https://github.com/theforeman/forklift/blob/master/vagrant/config/versions.yaml)

This was based on the [wiki procedure](https://projects.theforeman.org/projects/foreman/wiki/Release_Process#Branching-for-series) and sometimes has a bit more info.
