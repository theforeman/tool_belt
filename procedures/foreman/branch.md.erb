[ ] Make this post a wiki

# Prep Week: <%= two_weeks_before %> to <%= two_weeks_before + 4 %>

## Installer Maintainer

- [ ] Make releases of installer modules
  - Tier 0 (no dependencies)
    - [ ] [certs](https://github.com/theforeman/puppet-certs)
    - [ ] [dhcp](https://github.com/theforeman/puppet-dhcp)
    - [ ] [dns](https://github.com/theforeman/puppet-dns)
    - [ ] [foreman](https://github.com/theforeman/puppet-foreman)
    - [ ] [git](https://github.com/theforeman/puppet-git)
    - [ ] [puppet](https://github.com/theforeman/puppet-puppet)
    - [ ] [qpid](https://github.com/theforeman/puppet-qpid)
    - [ ] [tftp](https://github.com/theforeman/puppet-tftp)
  - Tier 1 (Dependencies on Tier 0)
    - [ ] [candlepin](https://github.com/theforeman/puppet-candlepin)
    - [ ] [foreman_proxy](https://github.com/theforeman/puppet-foreman_proxy)
    - [ ] [pulp](https://github.com/theforeman/puppet-pulp)
    - [ ] [pulpcore](https://github.com/theforeman/puppet-pulpcore)
  - Tier 2 (Dependencies on Tier 1)
    - [ ] [foreman_proxy_content](https://github.com/theforeman/puppet-foreman_proxy_content)
    - [ ] [katello](https://github.com/theforeman/puppet-katello)

## Release Owner

- [ ] Ensure headline features planned for the release have been merged or push them off to the next release.
- Translations:
  - [ ] Update locales in foreman __develop__: `make -C locale tx-update`
  - [ ] Ask plugin authors to start extracting i18n strings and pushing the changes into develop/master git branches so Transiflex can pick it up
  - [ ] Announce string freeze date on discourse and send announcement via https://www.transifex.com/foreman/foreman/announcements/
  - [ ] Update [foreman-dev](https://community.theforeman.org/c/development) with [translations status](https://www.transifex.com/projects/p/foreman/) to encourage 100% translations before release

# Stabilization Week: <%= one_week_before %> to <%= one_week_before + 4 %>

## Release Owner

- [ ] Announce start of stabilization week to discourse [development category](https://community.theforeman.org/c/development).
- [ ] Request new Hammer CLI release from maintainers if needed.
- Prepare the manual for the new version:
  - [ ] Change `$next` parameter on [web class](https://github.com/theforeman/foreman-infra/blob/master/puppet/modules/profiles/manifests/web.pp) to point to the new version number.
  - [ ] Copy [website manual content](https://github.com/theforeman/theforeman.org/tree/gh-pages/manuals) from nightly to <%= release %> and update version numbers mentioned in it.
  - [ ] Clean up deprecation and upgrade warnings from nightly manual.
- [ ] Add new languages that are at a [reasonable completion on Transifex](https://www.transifex.com/foreman/foreman/foreman/) to __develop__

## Release Engineer

- Create new GPG key for release. See [GPG_Keys](https://projects.theforeman.org/projects/foreman/wiki/GPG_Keys) if needed.
  - [ ] [Generate](https://github.com/theforeman/theforeman-rel-eng/blob/master/generate_gpg)
  - [ ] [Backup](https://github.com/theforeman/theforeman-rel-eng/blob/master/export_gpg_private)
  - [ ] [Sign](https://github.com/theforeman/theforeman-rel-eng/blob/master/sign_gpg)
  - [ ] [Upload](https://github.com/theforeman/theforeman-rel-eng/blob/master/upload_gpg)
- [ ] Publish the key by [exporting](https://github.com/theforeman/theforeman-rel-eng/blob/master/export_gpg_public) the GPG key
  - [ ] Update the website's [security.md](https://github.com/theforeman/theforeman.org/blob/gh-pages/security.md) and create a file in [static/keys](https://github.com/theforeman/theforeman.org/tree/gh-pages/static/keys)
  - [ ] Create [releases/<%= release %>/RPM-GPG-KEY-foreman](https://yum.theforeman.org/releases/<%= release %>/RPM-GPG-KEY-foreman) on yum.theforeman.org
  - [ ] Commit the [settings file](https://github.com/theforeman/theforeman-rel-eng/blob/master/releases/foreman/<%= release %>/settings) to the `theforeman-rel-eng` repository
- [ ] Create new settings files for [client](https://github.com/theforeman/theforeman-rel-eng/blob/master/releases/client/<%= release %>/settings), ensure it has the rights `OSES` list and commit it too.
- [ ] Create `configs/foreman/<%= release %>.yaml` based on the nightly and previous release. Ensure that any `based_on` entries are filled out and pointing to nightly version of tag.
  - [ ] Generate mash configs
    ```
    bundle exec ./tools.rb mash-scripts configs/foreman/<%= release %>.yaml
    sed -i '/strict_keys/ s/True/False/' mash_scripts/foreman/<%= release %>.0/foreman-plugins-<%= release %>-*.mash
    ```
  - [ ] Open PR with new config and mash scripts for review
  - [ ] Create mash configuration on Koji, from tool_belt checkout:
    ```
    scp mash_scripts/foreman/<%= release %>.0/*.mash root@koji.katello.org:/etc/mash/
    ```
- [ ] Update mash script if needed - [collection-mash-split.py](https://github.com/theforeman/foreman-infra/blob/master/koji/collection-mash-split.py)
- [ ] Add the new release to the JJB job definitions in [foreman-infra](https://github.com/theforeman/foreman-infra/tree/master/puppet/modules/jenkins_job_builder/files/theforeman.org/)
  - [ ] Create a `<%= release %>.groovy` in `pipelines/vars/foreman/` describing the operating systems the release supports
  - [ ] Add `<%= release %>` to the version list in `theforeman.org/yaml/includes/foreman_versions.yaml.inc`
  - [ ] Add `<%= release %>` to the version list in `centos.org/jobs/foreman-pipelines.yml`
  - [ ] Create `test_<%= release.tr('.', '_') %>_stable.yaml` and `test_proxy_<%= release.tr('.', '_') %>_stable.yaml` in `yaml/jobs/`
- [ ] Open PR to remove any jobs that are related to end of life versions
- [ ] Open PR to add <%= release %> to [Forklift versions config](https://github.com/theforeman/forklift/blob/master/vagrant/config/versions.yaml). Once the PR is merged, upgrade pipelines will fail, so do not merge it before packaging has been branched.

# Branching: <%= target_date %>

## Release Engineer

- [ ] Branch RPM packaging using [tool_belt](https://github.com/theforeman/tool_belt)
  - [ ] Clone tags and create build targets in Koji: `bundle exec ./tools.rb koji --commit configs/foreman/<%= release %>.yaml`
  - [ ] Create a `rpm/<%= release %>` branch in [foreman-packaging](https://github.com/theforeman/foreman-packaging) based on `rpm/develop`
- [ ] Branch Debian packaging
  - [ ] Clone Debian nightly repos to <%= release %> using [copy/freight instructions](https://projects.theforeman.org/projects/foreman/wiki/Debian_Packaging#Branching-for-release)
  - [ ] Create a `deb/<%= release %>` branch in [foreman-packaging](https://github.com/theforeman/foreman-packaging) based on `deb/develop`

## Release Owner

- [ ] Create <%= release %>-stable branches
  - [ ] [foreman](https://github.com/theforeman/foreman)
  - [ ] [foreman-installer](https://github.com/theforeman/foreman-installer)
    - [ ] `bundle exec rake pin_modules && sed -i '/Puppetfile.lock/d' .gitignore && bundle exec librarian-puppet install && git add Puppetfile*`
  - [ ] [foreman-selinux](https://github.com/theforeman/foreman-selinux)
  - [ ] [smart-proxy](https://github.com/theforeman/smart-proxy)
  - [ ] [hammer-cli](https://github.com/theforeman/hammer-cli)
  - [ ] [hammer-cli-foreman](https://github.com/theforeman/hammer-cli-foreman)

The next step should only be done after all branching, including packaging, has completed.

- [ ] Bump versions to <%= develop %>-develop
  `echo <%= develop %>.0-develop > VERSION`
  - [ ] [foreman](https://github.com/theforeman/foreman)
  Also change package.json version field to <%= develop %>.0
  - [ ] [foreman-installer](https://github.com/theforeman/foreman-installer)
  - [ ] [foreman-selinux](https://github.com/theforeman/foreman-selinux)
  - [ ] [smart-proxy](https://github.com/theforeman/smart-proxy)
  - [ ] [hammer-cli](https://github.com/theforeman/hammer-cli)
  - [ ] [hammer-cli-foreman](https://github.com/theforeman/hammer-cli-foreman)

# Preparing build systems: <%= target_date %>

## Release engineer

- [ ] Update foreman-packaging rpm/develop to ensure nightlies build:
  - [ ] rpm/develop:
    - [ ] Update the build tag: `sed -i 's/fm<%= release.tr('.', '_') %>/fm<%= develop.tr('.', '_') %>/g' rel-eng/{releasers.conf,tito.props} package_manifest.yaml`
    - [ ] Set to version `<%= develop %>.0`, reset release to `1` in `packages/foreman/foreman{,-{installer,proxy,release,selinux}}/*.spec` and `packages/foreman/rubygem-hammer_cli{,_foreman}/*.spec`. Then create a changelog using `obal changelog --message '- Bump version to <%= develop %>-develop' foreman{,-{installer,proxy,release,selinux}} rubygem-hammer_cli{,_foreman}`
  - [ ] deb/develop: `scripts/changelog.rb -v <%= develop %>.0-1 -m "Bump changelog to <%= develop %>.0 to match VERSION" debian/*/*/changelog`
- [ ] Prepare build systems for <%= release %> release:
  - [ ] foreman-packaging's rpm/<%= release %>
    - [ ] Update `packages/foreman/foreman-release/foreman.gpg`, `mock/*.cfg`, `package_manifest.yaml`, `rel-eng/{releasers.conf,tito.props}` and `repoclosure/*.conf`

# Other systems: <%= target_date %>

## Release Owner

- [ ] Create release schedule page for next version (<%= develop %>) linked from [Development_Resources](https://projects.theforeman.org/projects/foreman/wiki/Development_Resources) and post planned schedule on Discourse.
- Create Redmine versions
  - [ ] Add next version number (<%= develop %>.0) and make sure it is shared with subprojects in [foreman](https://projects.theforeman.org/projects/foreman/settings/versions)
  - [ ] Add first patch release (<%= release %>.1) and make sure it is shared with subprojects in [foreman](https://projects.theforeman.org/projects/foreman/settings/versions)
- [ ] Ensure current Foreman deprecations for the next release are removed in __develop__

This was based on the [wiki procedure](https://projects.theforeman.org/projects/foreman/wiki/Release_Process#Branching-for-series) and sometimes has a bit more info.
